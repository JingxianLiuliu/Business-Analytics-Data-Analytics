# -*- coding: utf-8 -*-
"""ABTesting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SB-NCa0kD8f-AmgHPyxi_MtJ_1kua0WV

**AB testing**
"""

import numpy as np 
random_data = np.random.randint(1, 7, 100000)
print(random_data.mean()) 
print(random_data.std())

print(random_data[0:100])

sample1 = []
for i in range(0, 10):
    sample1.append(random_data[int(np.random.random() * len(random_data))])

print(sample1)

np.mean(sample1)

np.std(sample1)

samples = []
samples_mean = []
samples_std = []

for i in range(0, 1000):
    sample = []
    for j in range(0, 50):
        sample.append(random_data[int(np.random.random() * len(random_data))])
    sample_np = np.array(sample)
    samples_mean.append(sample_np.mean())
    samples_std.append(sample_np.std())
    samples.append(sample_np)

samples_mean_np = np.array(samples_mean)
samples_std_np = np.array(samples_std)

print(samples_mean_np)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
plt.rcParams.update({'figure.figsize':(7,5), 'figure.dpi':100})

# Plot Histogram on x
#x = np.random.normal(size = 1000)
plt.hist(samples_mean_np, bins=20)
plt.gca().set(title='Frequency Histogram', ylabel='Frequency');

from scipy.stats import norm 
norm.cdf(-24)

norm.cdf(-0.632)

norm.cdf(-0.632)

from statsmodels.stats.power import zt_ind_solve_power
from statsmodels.stats.proportion import proportion_effectsize as es
 
zt_ind_solve_power(effect_size=es(prop1=0.1, prop2=0.09), alpha=0.05, power=0.9, alternative="two-sided")